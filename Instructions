📦 Step 1: Create S3 Bucket
Objective: Store CSV files containing VM requirements.

Go to the AWS S3 Console.

Click Create bucket.

Configure:

Bucket name: vm-scaling-bucket

Region: e.g., us-east-1

Uncheck "Block all public access" (ensure permissions are configured correctly)

Click Create bucket.

🔐 Step 2: Create IAM Role for Lambda
Objective: Grant Lambda permissions to access S3 and manage EC2.

Navigate to IAM Console → Roles → Create role.

Select:

Trusted entity: AWS service → Lambda

Attach the following policies:

AmazonS3FullAccess

AmazonEC2FullAccess

CloudWatchLogsFullAccess

Role name: Lambda-S3-EC2-Role

Click Create role.

🔒 Step 3: Create Security Group
Objective: Allow SSH/HTTP access to EC2 instances.

Go to EC2 Console → Security Groups → Create security group.

Configure:

Name: Scaling-SG

Description: Security group for scaled instances

Add inbound rules:

SSH (Port 22): Source = My IP

HTTP (Port 80): Source = 0.0.0.0/0

Click Create security group.

🔑 Step 4: Create Key Pair
Objective: Enable SSH access to EC2 instances.

Go to EC2 Console → Key Pairs → Create key pair.

Configure:

Name: scaling-keypair

Type: RSA

Format: .pem

Click Create and download the .pem file securely.

🧠 Step 5: Create Lambda Function
Objective: Process CSV files and manage EC2 instances.

Go to Lambda Console → Create function → Author from scratch.

Configure:

Name: vm-scaling-function

Runtime: Python 3.9

Architecture: x86_64

Execution role: Use existing → Lambda-S3-EC2-Role

Click Create function.

Replace the default Lambda code with your custom logic in lambda_function.py.

🔧 Update in the code:
Replace AMI_ID with your region's AMI (found in EC2 Console).

Replace SECURITY_GROUP_IDS with the ID from Step 3.

Ensure KEY_NAME matches the key pair from Step 4.

Click Deploy.

🔁 Step 6: Configure Lambda Trigger
Objective: Trigger Lambda when a CSV is uploaded to S3.

In the Lambda function, click Add trigger.

Configure:

Trigger: S3

Bucket: vm-scaling-bucket

Event type: All object create events

Prefix: allocations/

Enable recursive invocation

Click Add.

✅ Step 7: Test the Workflow
Objective: Verify end-to-end functionality.

📄 Sample CSV
csv
Copy
Edit
Timestamp,CPU_usage_MHZ,Memory_usage_KB,Network_received_throughput_KB_s,VMs_needed
2023-10-01 00:00:00,1800,3800,900,1
🚀 Upload CSV to S3
Navigate to S3 → vm-scaling-bucket → Upload.

Upload file with path: allocations/test-upload.csv.

🔍 Check Execution
Go to Lambda Console → Monitor → View CloudWatch logs.

Confirm logs show successful processing.

🖥️ Verify EC2 Instances
Go to EC2 Console → Instances.

Look for running instances with tag:

ini
Copy
Edit
ScalingGroup=auto-scaled-vms
